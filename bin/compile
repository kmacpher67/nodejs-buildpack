#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail   # dont ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

DEFAULT_CACHE="node_modules bower_components"

### Configure directories

BUILD_DIR=${1:-}
echo "BUILD_DIR = $BUILD_DIR"
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
$BP_DIR/compile-extensions/bin/check_stack_support

echo "ENV_DIR value = $ENV_DIR"

# config
# http://orm-buildpack.s3.amazonaws.com/Xvfb.tar.gz
echo "starting XVFB install Buildpack URL xvfb.tar.bz2"
# Buildpack URL
ARCHIVE_NAME=xvfb
FILE_NAME=xvfb_1.15.1-0ubuntu2.7_amd64.deb
BUILDPACK_XVFB_PACKAGE=http://archive.ubuntu.com/ubuntu/pool/main/x/xorg-server/xvfb_1.15.1-0ubuntu2.7_amd64.deb

mkdir -p $CACHE_DIR
if ! [ -e $CACHE_DIR/$FILE_NAME ]; then
  echo "-----> Fetching XVFB binaries at ${BUILDPACK_XVFB_PACKAGE}"
  curl $BUILDPACK_XVFB_PACKAGE -s -o $CACHE_DIR/$FILE_NAME
fi

echo "-----> Extracting XVFB binaries to ${BUILD_DIR}/$ARCHIVE_NAME"
mkdir -p $CACHE_DIR/$ARCHIVE_NAME
mkdir -p /home/vcap/app/$ARCHIVE_NAME
mkdir -p $BUILD_DIR/$ARCHIVE_NAME
mkdir -p /home/vcap/app/bin

# -- tar jxf $CACHE_DIR/$FILE_NAME -C $CACHE_DIR
dpkg -x $CACHE_DIR/$FILE_NAME $CACHE_DIR/$ARCHIVE_NAME
echo "after dpkg -x $CACHE_DIR/$FILE_NAME to $BUILD_DIR/$ARCHIVE_NAME"
mv $CACHE_DIR/$ARCHIVE_NAME/usr/ $BUILD_DIR/$ARCHIVE_NAME
echo "almost done, after not using apt-get $ARCHIVE_NAME $BUILD_DIR/$ARCHIVE_NAME"
echo "$BUILD_DIR= `ls -ltr $BUILD_DIR`"
echo " contents of /$ARCHIVE_NAME is: `ls -ltr $BUILD_DIR/$ARCHIVE_NAME`"

# --- perms cp cp  $BUILD_DIR/$ARCHIVE_NAME/usr/bin/* /usr/local/bin 
# -- $BUILD_DIR /home/vcap/app/
cp $BUILD_DIR/$ARCHIVE_NAME/usr/bin/* /home/vcap/app/bin
echo " contents of /home/vcap/app/bin is: `ls -ltr /home/vcap/app/bin`"

# export PATH="$BUILD_DIR/$ARCHIVE_NAME/usr/bin:/home/vcap/app/bin":$PATH
# export PATH="$BUILD_DIR/$ARCHIVE_NAME"
# export PATH="/home/vcap/app/.heroku/node/bin"
# # -- /tmp/staged/app/node_modules/phantomjs/lib/phantom/bin/phantomjs

# # -- export LD_LIBRARY_PATH="$BUILD_DIR/vendor/xvfb/":$LD_LIBRARY_PATH
# # -- test it?
# # echo " does the xvfb-run be found? `xvfb-run` " 



echo "$BP_DIR = $$BP_DIR"

mkdir -p $BUILD_DIR/.heroku/node/
cd $BUILD_DIR
export PATH="$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/xvfb/usr/bin:/home/vcap/app/bin":$PATH

# CF Common
export BUILDPACK_PATH=$BP_DIR
source $BP_DIR/compile-extensions/lib/common
# END CF Common
LOG_FILE='/tmp/node-build-log.txt'
echo "" > "$LOG_FILE"

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh
source $BP_DIR/lib/vendor/new_relic/install.sh $BUILD_DIR

### Handle errors

handle_failure() {
  header "Build failed"
  warn_untracked_dependencies "$LOG_FILE"
  warn_angular_resolution "$LOG_FILE"
  warn_missing_devdeps "$LOG_FILE"
  warn_econnreset "$LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false

### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment"
create_env # can't pipe the whole thing because piping causes subshells, preventing exports
list_node_config | output "$LOG_FILE"

install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  if [ -n "$iojs_engine" ]; then
    echo "engines.iojs (package.json):  $iojs_engine (iojs)"
  else
    echo "engines.node (package.json):  ${node_engine:-unspecified}"
  fi
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  if [ -n "$iojs_engine" ]; then
    warn_node_engine "$iojs_engine"
    install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node"
    echo "Using bundled npm version for iojs compatibility: `npm --version`"
  else
    warn_node_engine "$node_engine"
    install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
    install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  fi
}

header "Installing binaries"
install_bins | output "$LOG_FILE"
cp $BUILD_DIR/$ARCHIVE_NAME/usr/bin/* $BUILD_DIR/.heroku/node

echo "**************************"
cd $BUILD_DIR/$ARCHIVE_NAME/usr/bin
echo $(ls)
echo "**************************"
export PATH="$BUILD_DIR/$ARCHIVE_NAME/usr/bin:$PATH"
echo $PATH
cd /home/vcap/app/
mkdir .heroku
cd .heroku
mkdir node
cd node
mkdir bin
cd bin
echo "111**************************"
cp $BUILD_DIR/$ARCHIVE_NAME/usr/bin/* /home/vcap/app/.heroku/node/bin
export PATH="/home/vcap/app/.heroku:$PATH"
cd /home/vcap/app/.heroku/node/bin
echo $(ls)
echo "**************************"


restore_cache() {
  local cache_status="$(get_cache_status)"

  if [ "$cache_status" == "valid" ]; then
    local cache_directories=$(get_cache_directories)
    if [ "$cache_directories" == "" ]; then
      echo "Loading 2 from cacheDirectories (default):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$DEFAULT_CACHE"
    else
      echo "Loading $(echo $cache_directories | wc -w | xargs) from cacheDirectories (package.json):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
    fi
  else
    echo "Skipping cache restore ($cache_status)"
  fi
}

header "Restoring cache"
restore_cache | output "$LOG_FILE"

build_dependencies() {
  if $PREBUILD; then
    echo "Prebuild detected (node_modules already exists)"
    rebuild_node_modules "$BUILD_DIR"
  else
    install_node_modules "$BUILD_DIR"
  fi
}

header "Building dependencies"
build_dependencies | output "$LOG_FILE"

cache_build() {
  local cache_directories=$(get_cache_directories)

  echo "Clearing previous node cache"
  clear_cache
  if ! ${NODE_MODULES_CACHE:-true}; then
    echo "Skipping cache save (disabled by config)"
  elif [ "$cache_directories" == "" ]; then
    echo "Saving 2 cacheDirectories (default):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$DEFAULT_CACHE"
  else
    echo "Saving $(echo $cache_directories | wc -w | xargs) cacheDirectories (package.json):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
  fi
  save_signature
}

header "Caching build"
cache_build | output "$LOG_FILE"

summarize_build() {
  cd $BUILD_DIR
  (npm ls --depth=0 | tail -n +2 || true) 2>/dev/null
}

header "Build succeeded!"
summarize_build | output "$LOG_FILE"

warn_no_start "$LOG_FILE"
warn_unmet_dep "$LOG_FILE"
